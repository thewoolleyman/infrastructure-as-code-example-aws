AWSTemplateFormatVersion: 2010-09-09
Description: Infrastructure as Code Example - a full stack, automatically and
  continuously deployed web app
Parameters:
  ProjectId:
    Type: String
    Description: Project ID.
    Default : iaceaws
    AllowedPattern: '^[a-z]([a-z0-9-])+$'
    ConstraintDescription: >-
      Project IDs must be between 2 and 15 characters, begin with a letter, and
      only contain lowercase letters, numbers, and hyphens (-).
    MinLength: 2
    MaxLength: 15
  RepositoryName:
    Type: String
    Description: AWS CodeCommit repository name.
    Default : iaceaws
    MinLength: 1
    MaxLength: 100
  StackName:
    Type: String
    Description: AWS CloudFormation stack name.
    Default : iaceaws
    MinLength: 1
    MaxLength: 100
Resources:
  CloudFormationTrustRole:
    Type: 'AWS::IAM::Role'
    Description: Creating service role in IAM for AWS CloudFormation
    Properties:
      Path: /
      RoleName: !Sub 'Worker-${ProjectId}-CloudFormation'
      Policies:
      - PolicyName: WorkerCloudFormationRolePolicy
        PolicyDocument:
          Statement:
          - Action:
            - 's3:PutObject'
            - 's3:GetObject'
            - 's3:GetObjectVersion'
            Resource:
            - !Sub 'arn:aws:s3:::${S3Bucket}'
            - !Sub 'arn:aws:s3:::${S3Bucket}/*'
            Effect: Allow
          - Action:
            - 's3:CreateBucket'
            - 's3:DeleteBucket'
            Resource: '*'
            Effect: Allow
      AssumeRolePolicyDocument:
        Statement:
        - Action: 'sts:AssumeRole'
          Effect: Allow
          Principal:
            Service:
            - cloudformation.amazonaws.com
  CodeBuildPolicy:
    Type: 'AWS::IAM::Policy'
    Description: Setting IAM policy for service role for CodeBuild Amazon EC2 instances
    Properties:
      PolicyName: WorkerCodeBuildPolicy
      PolicyDocument:
        Statement:
        - Action:
          - 'logs:CreateLogGroup'
          - 'logs:CreateLogStream'
          - 'logs:PutLogEvents'
          Resource: '*'
          Effect: Allow
        - Action:
          - 's3:PutObject'
          - 's3:GetObject'
          - 's3:GetObjectVersion'
          Resource:
          - !Sub 'arn:aws:s3:::${S3Bucket}'
          - !Sub 'arn:aws:s3:::${S3Bucket}/*'
          Effect: Allow
        - Action:
          - 'codecommit:GitPull'
          Resource:
          - !Sub 'arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${RepositoryName}'
          Effect: Allow
      Roles:
      - !Ref CodeBuildRole
  CodeBuildRole:
    Type: 'AWS::IAM::Role'
    Description: Creating service role in IAM for CodeBuild Amazon EC2 instances
    Properties:
      Path: /
      RoleName: !Sub 'Worker-${ProjectId}-CodeBuild'
      AssumeRolePolicyDocument:
        Statement:
        - Action: 'sts:AssumeRole'
          Effect: Allow
          Principal:
            Service: codebuild.amazonaws.com
  CodeBuildProject:
    DependsOn:
    - CodeBuildPolicy
    Type: 'AWS::CodeBuild::Project'
    Properties:
      Artifacts:
        Type: S3
        Location: !GetAtt S3Bucket.Arn
        Path: temporary-placeholder-codebuild-artifacts
        Name: placeholder.zip
        Packaging: ZIP
      Description: CodeBuild Project
      ServiceRole: !Ref CodeBuildRole
      Environment:
        Type: container
        Image: 'aws/codebuild/eb-nodejs-6.10.0-amazonlinux-64:4.0.0'
        ComputeType: small
        EnvironmentVariables:
        - Value: !Ref S3Bucket
          Name: S3_BUCKET
      Source:
        Type: CODECOMMIT
        Location: !GetAtt CodeCommitRepo.CloneUrlHttp
        BuildSpec: 'infra/codebuild/buildspec.yml'
      Name: !Ref ProjectId
  CodeCommitRepo:
    Type: 'AWS::CodeCommit::Repository'
    Description: Creating AWS CodeCommit repository for application source code
    Properties:
      RepositoryName: !Ref RepositoryName
  CodePipelineTrustRole:
    Type: 'AWS::IAM::Role'
    Description: Creating service role in IAM for AWS CodePipeline
    Properties:
      Path: /
      RoleName: !Sub 'Worker-${ProjectId}-CodePipeline'
      Policies:
      - PolicyName: WorkerCodePipelineRolePolicy
        PolicyDocument:
          Statement:
          - Action:
            - 's3:GetObject'
            - 's3:GetObjectVersion'
            - 's3:GetBucketVersioning'
            - 's3:PutObject'
            Resource:
            - !Sub 'arn:aws:s3:::${S3Bucket}'
            - !Sub 'arn:aws:s3:::${S3Bucket}/*'
            Effect: Allow
          - Action:
            - 'codecommit:CancelUploadArchive'
            - 'codecommit:GetBranch'
            - 'codecommit:GetCommit'
            - 'codecommit:GetUploadArchiveStatus'
            - 'codecommit:UploadArchive'
            Resource:
            - !Sub 'arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${RepositoryName}'
            Effect: Allow
          - Action:
            - 'codebuild:StartBuild'
            - 'codebuild:BatchGetBuilds'
            - 'codebuild:StopBuild'
            Resource:
            - !GetAtt CodeBuildProject.Arn
            Effect: Allow
          - Action:
            - 'cloudformation:DescribeStacks'
            - 'cloudformation:DescribeChangeSet'
            - 'cloudformation:CreateChangeSet'
            - 'cloudformation:DeleteChangeSet'
            - 'cloudformation:ExecuteChangeSet'
            Resource:
            - !Sub 'arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${StackName}/*'
            Effect: Allow
          - Action:
            - 'iam:PassRole'
            Resource:
            - !GetAtt CloudFormationTrustRole.Arn
            Effect: Allow
      AssumeRolePolicyDocument:
        Statement:
        - Action: 'sts:AssumeRole'
          Effect: Allow
          Principal:
            Service:
            - codepipeline.amazonaws.com
          Sid: 1
  ProjectPipeline:
    DependsOn:
    - CodePipelineTrustRole
    - S3Bucket
    - CodeBuildProject
    - CloudFormationTrustRole
    Type: 'AWS::CodePipeline::Pipeline'
    Description: Creating a deployment pipeline for your project in AWS CodePipeline
    Properties:
      ArtifactStore:
        Type: S3
        Location: !Ref S3Bucket
      Stages:
      - Actions:
        - ActionTypeId:
            Owner: AWS
            Category: Source
            Version: 1
            Provider: CodeCommit
          Configuration:
            PollForSourceChanges: false
            RepositoryName: !Ref RepositoryName
            BranchName: master
          InputArtifacts: []
          OutputArtifacts:
          - Name: !Sub '${ProjectId}-SourceArtifact'
          RunOrder: 1
          Name: ApplicationSource
        Name: Source
      - Actions:
        - ActionTypeId:
            Owner: AWS
            Category: Build
            Version: 1
            Provider: CodeBuild
          Configuration:
            ProjectName: !Ref ProjectId
          InputArtifacts:
          - Name: !Sub '${ProjectId}-SourceArtifact'
          OutputArtifacts:
          - Name: !Sub '${ProjectId}-BuildArtifact'
          RunOrder: 1
          Name: PackageExport
        Name: Build
      - Actions:
        - ActionTypeId:
            Owner: AWS
            Category: Deploy
            Version: 1
            Provider: CloudFormation
          Configuration:
            TemplatePath: !Sub '${ProjectId}-BuildArtifact::template-export.yml'
            ActionMode: CHANGE_SET_REPLACE
            Capabilities: CAPABILITY_NAMED_IAM
            ParameterOverrides: !Sub '{"ProjectId":"${ProjectId}"}'
            ChangeSetName: pipeline-changeset
            RoleArn: !GetAtt CloudFormationTrustRole.Arn
            StackName: !Ref StackName
          InputArtifacts:
          - Name: !Sub '${ProjectId}-BuildArtifact'
          OutputArtifacts: []
          RunOrder: 1
          Name: GenerateChangeSet
        - ActionTypeId:
            Owner: AWS
            Category: Deploy
            Version: 1
            Provider: CloudFormation
          Configuration:
            ActionMode: CHANGE_SET_EXECUTE
            ChangeSetName: pipeline-changeset
            StackName: !Ref StackName
          InputArtifacts: []
          OutputArtifacts: []
          RunOrder: 2
          Name: ExecuteChangeSet
        Name: Deploy
      RoleArn: !GetAtt CodePipelineTrustRole.Arn
      Name: !Sub '${ProjectId}-Pipeline'
  S3ArtifactBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Description: Setting Amazon S3 bucket policy for AWS CodePipeline access
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Condition:
            Bool:
              'aws:SecureTransport': false
          Action:
          - 's3:GetObject'
          - 's3:GetObjectVersion'
          - 's3:GetBucketVersioning'
          Resource:
          - !Sub 'arn:aws:s3:::${S3Bucket}'
          - !Sub 'arn:aws:s3:::${S3Bucket}/*'
          Effect: Allow
          Principal:
            AWS:
            - !GetAtt CodePipelineTrustRole.Arn
            - !GetAtt CodeBuildRole.Arn
          Sid: WhitelistedGet
        - Action:
          - 's3:PutObject'
          Resource:
          - !Sub 'arn:aws:s3:::${S3Bucket}'
          - !Sub 'arn:aws:s3:::${S3Bucket}/*'
          Effect: Allow
          Principal:
            AWS:
            - !GetAtt CodePipelineTrustRole.Arn
            - !GetAtt CodeBuildRole.Arn
            - !GetAtt CloudFormationTrustRole.Arn
          Sid: WhitelistedPut
        Id: SSEAndSSLPolicy
  S3Bucket:
    DeletionPolicy: Delete
    Type: 'AWS::S3::Bucket'
    Description: Creating Amazon S3 bucket for artifacts
    Properties:
      BucketName: !Sub 'aws-${AWS::Region}-${AWS::AccountId}-${ProjectId}-artifacts'
      VersioningConfiguration:
        Status: Enabled
      Tags:
      - Value: !Sub '${ProjectId}-S3Bucket'
        Key: Name
  SourceEvent:
    Type: 'AWS::Events::Rule'
    Properties:
      EventPattern:
        detail-type:
        - CodeCommit Repository State Change
        resources:
        - !GetAtt CodeCommitRepo.Arn
        detail:
          referenceType:
          - branch
          event:
          - referenceCreated
          - referenceUpdated
          referenceName:
          - master
        source:
        - aws.codecommit
      Description: >-
        Rule for Amazon CloudWatch Events to detect changes to the source
        repository and trigger pipeline execution
      State: ENABLED
      Targets:
      - Id: ProjectPipelineTarget
        Arn: !Sub 'arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${ProjectId}-Pipeline'
        RoleArn: !GetAtt SourceEventRole.Arn
      Name: !Sub '${ProjectId}-SourceEvent'
  SourceEventRole:
    Type: 'AWS::IAM::Role'
    Description: >-
      IAM role to allow Amazon CloudWatch Events to trigger AWS CodePipeline
      execution
    Properties:
      RoleName: !Sub 'Worker-${ProjectId}-CloudWatchEventRule'
      Policies:
      - PolicyName: WorkerCloudWatchEventPolicy
        PolicyDocument:
          Statement:
          - Action:
            - 'codepipeline:StartPipelineExecution'
            Resource:
            - !Sub 'arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${ProjectId}-Pipeline'
            Effect: Allow
      AssumeRolePolicyDocument:
        Statement:
        - Action: 'sts:AssumeRole'
          Effect: Allow
          Principal:
            Service:
            - events.amazonaws.com
          Sid: 1
